spring: 
  application: 
    name: connessioni
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        #healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
  datasource:
    url: jdbc:postgresql://localhost:5432/connessioni
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    initialization-mode: always
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: asw-kafka:9092  # Indirizzo del broker Kafka
    # Configurazione per il Producer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer  # Serializzatore per la chiave (String)
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer  # Serializzatore per il valore (Recensione)
      name: ConnessioniProducer
      # Topic a cui inviare i messaggi
      channel:
        out1: asw-ConnessioneCreated  # Nome del topic a cui inviare i messaggi Kafka
        out2: asw-ConnessioneDeleted  # Nome del topic a cui inviare i messaggi Kafka
      messages-to-send: 20

server: 
  port: ${PORT:${SERVER_PORT:0}}
#  port: 8080
  # per swagger, se dietro a un api gateway 
  forward-headers-strategy: framework

# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false